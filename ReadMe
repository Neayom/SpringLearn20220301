1.配置文件的读取顺序
类路径/properties
config/properties
项目根目录
项目根目录/config
java jar ***.jar --spring.config.location=D:/application.properties\ (不会互补)

jar包外的配置文件 ./
jar包外的配置文件的config（带通配符） ./config/*/
jar包外的配置文件的config  ./config/

2.profile文件的加载
profile的意思是配置，不同的环境需要不同的配置
application-{pofile}.properties
@profile注解，根据注解中的参数，有些bean会生效，有些不会生效

3.yml > ymal > properties

4.属性注入
通过yml文件中设置值，可以为bean中属性赋值
@ConfigurationProperties(prefix = "user") 告诉Springboot将本类中的所有属性和配置文件中相关的配置进行绑定
需要数据校验，则将@Validated注解标识在@ConfigurationProperties注解下面：支持jsr-303的数据校验
jsr-303的数据校验：@Null @NotNull @Email.... 需要引入：spring-boot-starter-validation
如果想要将属性的配置文件和主配置文件分开，则@PropertySource(value = {"classpath:user.properties"})：这里必须用properties结尾

5.@SpringbootApplication注解内部有@ComponentScan注解，相当于<context:component-scan>但是没有指定basepackage，
没有指定 spring底层会自动扫描当前配置类所在的包

6.Springboot自动配置主流程：
  通过@SpringbootApplication入口注解，使用@EnableAutoConfiguration启动自动装配，该注解通过
@Import({AutoConfigurationImportSelector.class})导入AutoConfigurationImportSelector类（一个变种的ImportSelector类），该类会根据内部
getImportGroup方法返回的值，如果该值是你实现的一个Group接口的类，那么将会调用实现该Group接口类所实现的方法
准确来说是先调用process() 来获取自动配置类，再根据selectImports返回一个数组，将数组中的完整全限定名注册为bean
通过 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中
https://www.processon.com/view/link/5fc0abf67d9c082f447ce49b

面试回答两个点：1、怎么读取所有有效配置类 2、怎样通过配置文件关联到自动配置类
7.那么一个自动配置类是怎么玩的

8.日志信息
记录日志不能直接使用日志实现框架（log4j,jul） 必须通过日志门面来实现（slf4j,jcl）



9.序列化反序列化
序列化：java对象转化为json、xml、二进制其它的一些可以进行网络传输和存储的内容
反序列化：json xml转化为java对象
Springboot通过HttpMessageConverter进行序列化/反序列化

@RestController：
1.和Controller注解一样，将控制器类注入到Spring上下文环境，该类RequestMapping标注方法为HTTP服务端点。
2.作为ResponseBody的作用，请求响应默认使用的序列化方式是JSON，而不是跳转到jsp或模板页面。